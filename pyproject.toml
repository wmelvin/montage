[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "montage"
dynamic = ["version"]
description = 'Creates a montage given a list of images and parameters for placing them.'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["image generation", "montage"]
authors = [
  { name = "Bill Melvin", email = "bill@sbillmelvin.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["Pillow"]

[project.urls]
Documentation = "https://github.com/wmelvin/montage#readme"
Issues = "https://github.com/wmelvin/montage/issues"
Source = "https://github.com/wmelvin/montage"

[project.scripts]
make-montage = "montage:make_montage.main"
montage-missing = "montool_missing:montage_missing.main"

[tool.hatch.version]
path = "src/montage/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/montage", "src/montool_missing"]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/montage tests}"

[tool.coverage.run]
source_pkgs = ["montage", "tests"]
branch = true
parallel = true
omit = [
  "src/montage/__about__.py",
]

[tool.coverage.paths]
montage = ["src/montage", "*/montage/src/montage"]
tests = ["tests", "*/montage/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
